version: 2.1

orbs:
  win: circleci/windows@4.1
  ruby: circleci/ruby@2.0.0

jobs:
  test_linux:
    parameters:
      ruby_version:
        description: 'version tag for the cimg/ruby container'
        type: string

    machine:
      image: ubuntu-2004:current

    # be sure to update the ./setup_cimgruby_dev.sh if changes are made to steps below
    steps:
      - checkout

      - run:
          name: start docker-compose build environment
          command: |
            sudo ./test/bin/setup_volume_permissions.sh
            docker-compose up -d
            echo "Waiting for containers to start..."
            sleep 10
          environment:
            RUBY_VERSION: << parameters.ruby_version >>

      - run:
          name: install sql prereqs
          command: |
            docker exec cimg_ruby bash -c 'sudo -E ./test/bin/install-mssqltools.sh'

      - run:
          name: setup tiny_tds test database
          command: |
            docker exec cimg_ruby bash -c './test/bin/setup_tinytds_db.sh'

      - run:
          name: compile openssl library
          command: |
            docker exec cimg_ruby bash -c 'sudo -E ./test/bin/install-openssl.sh'

      - run:
          name: compile freetds library
          command: |
            docker exec cimg_ruby bash -c 'sudo -E ./test/bin/install-freetds.sh'

      - run:
          name: bundle install gems
          command: |
            docker exec cimg_ruby bash -c 'bundle install'

      - run:
          name: build gem
          command: |
            docker exec cimg_ruby bash -c 'bundle exec rake build'

      - run:
          name: test gem
          command: |
            docker exec cimg_ruby bash -c 'bundle exec rake test'

      - store_test_results:
          path: test/reports

  test_windows:
    parameters:
      ruby_version:
        description: 'version tag for rubydev environment'
        type: string

    executor:
      name: win/server-2022
      shell: powershell.exe

    environment:
      RAKEOPT: '-rdevkit'
      TESTOPTS: '-v'
      MAKE: 'make V=1 -j2'

    steps:
      - run:
          name: remove pre-installed ruby
          command: |
            Get-ChildItem -path 'C:\tools\' -filter Ruby* | Remove-Item -Force -Recurse

      - run:
          name: download and install ruby devkit
          command: |
            $ProgressPreference='SilentlyContinue'

            $uri = 'https://api.github.com/repos/oneclick/rubyinstaller2/tags?per_page=200'
            $releases = ((Invoke-WebRequest $uri) | ConvertFrom-Json).name | select-string -Pattern '<< parameters.ruby_version >>'
            $target_release = (($releases | Sort-Object -Descending)[0] | Out-String).Trim()
            $target_version = $target_release.Substring($target_release.Length - 7)
            $download_uri = "https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-$target_version/rubyinstaller-devkit-$target_version-x64.exe"
            echo "Ruby Target Version Found: $target_version"

            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -UseBasicParsing -uri $download_uri -OutFile ruby-setup.exe
            
            echo "Download finished, starting installation of $target_version"
            .\ruby-setup.exe /VERYSILENT /NORESTART /ALLUSERS /DIR=C:/Ruby<< parameters.ruby_version >>-x64

      - run:
          name: ruby diagnostics
          command: |
            $Env:PATH = "C:\\Ruby<< parameters.ruby_version >>-x64\\bin;$Env:PATH"
            echo "Perl Version:"
            perl --version
            echo "Ruby Version:"
            ruby --version
            echo "Gem Version:"
            gem --version
            rm .\ruby-setup.exe

      - run:
          name: install bundler
          command: |
            $Env:PATH = "C:\\Ruby<< parameters.ruby_version >>-x64\\bin;$Env:PATH"
            gem install bundler -v 2.3.26

      - checkout

      - restore_cache:
          name: restore gem cache
          keys:
            - v1-bundle-<< parameters.ruby_version >>-{{ .Branch }}-{{ checksum "tiny_tds.gemspec" }}
            - v1-bundle-<< parameters.ruby_version >>-{{ .Branch }}-
            - v1-bundle-<< parameters.ruby_version >>-

      - run:
          name: bundle install gems
          command: |
            $Env:PATH = "C:\\Ruby<< parameters.ruby_version >>-x64\\bin;$Env:PATH"
            bundle install --path vendor/bundle

      - save_cache:
          name: save gem cache
          paths:
            - ./vendor/bundle
          key: v1-bundle-<< parameters.ruby_version >>-{{ .Branch }}-{{ checksum "tiny_tds.gemspec" }}

      - attach_workspace:
          at: artifacts

      - run:
          name: install native gem and restore cross-compiled code from gem
          command: |
            $Env:PATH = "C:\\Ruby<< parameters.ruby_version >>-x64\\bin;$Env:PATH"
            $rubyArchitecture = (ruby -e 'puts RUBY_PLATFORM').Trim()
            $gemVersion = (Get-Content VERSION).Trim()

            gem install --local --install-dir=./tmp "artifacts/gems/tiny_tds-$gemVersion-$rubyArchitecture.gem"

            # Restore precompiled code
            $source = (Resolve-Path ".\tmp\gems\tiny_tds-$gemVersion-$rubyArchitecture\lib\tiny_tds").Path
            $destination = (Resolve-Path ".\lib\tiny_tds").Path
            Get-ChildItem $source -Recurse -Exclude "*.rb" | Copy-Item -Destination {Join-Path $destination $_.FullName.Substring($source.length)}
            
            # Restore ports
            Copy-Item -Path ".\tmp\gems\tiny_tds-$gemVersion-$rubyArchitecture\ports" -Destination "." -Recurse

      - restore_cache:
          name: restore mssql installation file
          key: downloads-{{ checksum "test/bin/install-mssql.ps1" }}

      - run:
          name: setup mssql
          command: |
            .\test\bin\install-mssql.ps1

      - save_cache:
          name: save downloads cache
          paths:
            - C:\Downloads
          key: downloads-{{ checksum "test/bin/install-mssql.ps1" }}

      - run:
          name: install toxiproxy-server
          command: |
            choco install toxiproxy-server --version=2.5.0 -y
            Start-Process toxiproxy-server

      - run:
          name: test gem
          command: |
            $Env:PATH = "C:\\Ruby<< parameters.ruby_version >>-x64\\bin;$Env:PATH"
            bundle exec rake test
          environment:
            TOXIPROXY_HOST: "localhost"

      - store_test_results:
          path: test/reports

  cross_compile_gem:
    machine:
      image: ubuntu-2004:current

    steps:
      - ruby/install:
          version: '2.7'
      - checkout
      - restore_cache:
          name: restore gem cache
          keys:
            - v1-bundle-{{ .Branch }}-{{ checksum "tiny_tds.gemspec" }}
            - v1-bundle-{{ .Branch }}-
            - v1-bundle-

      - run:
          name: bundle install gems
          command: |
            bundle install --path vendor/bundle

      - save_cache:
          name: save gem cache
          paths:
            - ./vendor/bundle
          key: v1-bundle-{{ .Branch }}-{{ checksum "tiny_tds.gemspec" }}

      - run:
          name: Write used versions for ports into file
          command: |
            bundle exec rake ports:version_file

      - restore_cache:
          name: restore ports cache
          keys:
            - ports-{{ checksum ".ports_versions" }}
            - ports-

      - run:
          name: Build gems
          command: |
            bundle exec rake gem
            bundle exec rake gem:native

      - run:
          name: Move gems into separate directory before caching
          command: |
            mkdir -p artifacts/gems
            mv pkg/*.gem artifacts/gems

      - store_artifacts:
          path: artifacts/gems

      - save_cache:
          name: save ports cache
          paths:
            - ./ports
          key: ports-{{ checksum ".ports_versions" }}

      - persist_to_workspace:
          name: save gems into workspace
          root: artifacts
          paths:
            - gems

workflows:
  test_supported_ruby_versions:
    jobs:
      - cross_compile_gem
      - test_windows:
          requires:
            - cross_compile_gem
          matrix: &ruby_versions
            parameters:
              ruby_version:
                - '2.4'
                - '2.5'
                - '2.6'
                - '2.7'
      - test_linux:
          matrix: *ruby_versions
